18#{ndarray, sparse matrix} of shape (n_samples, n_features)#NDArray
13#tuple if ``return_X_y`` is True#tuple
5#{ndarray, sparse matrix} of shape (n_samples, n_classes)#NDArray
5#array, shape (n_samples,)#NDArray
5#array-like, shape (n_samples, n_components)#ArrayLike
5#sparse matrix of shape (n_samples, n_features)#NDArray
4#sparse matrix of shape (n_samples, n_samples)#NDArray
4#array-like, shape (n_samples, n_features)#ArrayLike
4#ndarray, shape (n_samples,)#NDArray
4#float (if average is not None) or array of float, shape =        [n_unique_labels]#float|NDArray
3#{ndarray, sparse matrix}#NDArray
3#ndarray of shape coef.shape#NDArray
3#array of integers, shape: n_samples#NDArray
2#sparse matrix of shape (n_samples_transform, n_samples_fit)#NDArray
2#sparse-matrix of shape (n_queries, n_samples_fit)#NDArray
2#ndarray of shape (n_samples,) of arrays#NDArray
2#ndarray of shape (n_bins,) or smaller#NDArray
2#:class:`~sklearn.calibration.CalibrationDisplay`.#CalibrationDisplay
2#ndarray of shape (n_components, n_features),#NDArray
2#ndarray, dtype=np.intp#NDArray
2#ndarray array of shape (n_samples, n_features_new)#NDArray
2#ndarray of shape (n_samples, n_classes) or list of such arrays#NDArray|list[ArrayLike]
2#dict of str to any#dict[str, Any]
2#list of str of shape (n_output_features,)#list[str]
2#{ndarray, sparse matrix} of shape                 (n_samples, n_encoded_features)#NDArray
2#mapping of string to any#Mapping[str, Any]
2#array-like or sparse matrix of                 shape (n_samples, sum_n_components)#ArrayLike|NDArray
2#ndarray of shape  (n_classes * (n_classes - 1) / 2)#NDArray
2#ndarray, shape (n_features,)#NDArray
2#list of shape (n_alphas,) of ndarray of shape             (n_features, n_features)#list[NDArray]
2#mask#mask
2#ndarray of shape (n_features,), dtype={np.float32, np.float64}#NDArray
2#the return value of `func`#Any
2#list of size n_outputs of ndarray of size (n_classes,)#list[NDArray]
2#{ndarray, sparse matrix} of shape (n_samples, n_features)         or (n_samples, n_features_with_missing)#NDArray
2#array-like, shape (n_samples,)#ArrayLike
2#tuple if `return_X_y=True`#tuple
2#ndarray of shape `shape`#NDArray
2#ndarry of shape (n_samples,)#NDArray
2#{array-like, sparse matrix} of                 shape (n_samples, sum_n_components)#NDArray|ArrayLike
2#arrays of shape (n_samples,) or (n_samples, n_classes)#NDArray
2#sparse matrix of (n_samples, n_features)#NDArray
2#{array, sparse matrix}#NDArray
2#sparse matrix of shape (n_samples, n_nodes)#NDArray
2#ndarray of shape (n_samples, n_classes), or a list of such arrays#NDArray|list[ArrayLike]
2#sparse matrix of shape (n_samples, n_out)#NDArray
2#{array-like, sparse matrix} of shape (n_samples_X, n_features)#NDArray|ArrayLike
2#{array-like, sparse matrix} of shape (n_samples_Y, n_features)#NDArray|ArrayLike
2#ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1#NDArray|list[NDArray]
1#ndarray of shape (n_queries,) or (n_queries, n_outputs),                 dtype=double#NDArray
1#ndarray of shape (n_queries, n_classes), or a list of n_outputs                 of such arrays if n_outputs > 1.#NDArray|list[NDArray]
1#ndarray of shape (n_queries, n_classes), or a list of                 n_outputs of such arrays if n_outputs > 1.#NDArray|list[NDArray]
1#array, shape (n_samples, n_classes)#NDArray
1#ndarray of shape (n_samples, n_components),#NDArray
1#ndarray of shape (n_components, n_features) or None#NDArray|None
1#ndarray of shape (n_samples, n_components) or None#NDArray|None
1#array, shape=(n_features, n_features)#NDArray
1#X_original array-like of shape (n_samples, n_features)#ArrayLike
1#estimator instance#Estimator
1#a cross-validator instance.#CrossValidator
1#list, length=2 * len(arrays)#list
1#dict of float arrays of shape (n_splits,)#dict
1#ndarray of float of shape=(len(list(cv)),)#NDArray
1#iterator over dict of str to any#Iterator[dict[str, Any]]
1#{ndarray, sparse matrix} of shape (n_samples,)#NDArray
1#array or CSR matrix, shape (n_samples, n_classes)#NDArray
1#{ndarray, sparse matrix} of shape (n_samples, NP)#NDArray
1#{ndarray, sparse matrix}, dtype={np.float32, np.float64}#NDArray
1#ndarray, dtype={np.float32, np.float64}#NDArray
1#{ndarray, sparse matrix} of shape (n_samples, n_features + 1)#NDArray
1#{ndarray, sparse matrix} of (n_samples, n_features)#NDArray
1#array, shape (n_samples, n_components)#NDArray
1#array, shape (n_samples, n_features)#NDArray
1#array, shape (nsamples,)#NDArray
1#array-like, shape (n_queries, n_components)#ArrayLike
1#array-like, shape (n_samples, n_neighbors)#ArrayLike
1#sparse matrix in CSR format, shape = [n_samples, n_samples]#NDArray
1#array-like, shape [n_samples, n_components]#ArrayLike
1#:class:`~sklearn.utils.Bunch` or dict of such instances#Bunch|dict[str, Bunch]
1#array, shape = [n_samples, n_classes] or [n_samples]#NDArray|tuple
1#ndarray, shape (n_samples,) or (n_samples, n_classes)#NDArray
1#list of (objective, dual_gap) pairs#list[tuple[float,float]]
1#sequence of array-like of shape (n_samples,) or             (n_samples, n_outputs)#Sequence[ArrayLike]
1#sequence of indexable data-structures#Sequenc
1#element wise square#NDArray
1#1d boolean nd-array#NDArray
1#object with the joblib.Memory interface#Memory
1#list of {ndarray, sparse matrix, dataframe} or None#list[NDArray|DataFrame]|None
1#:class:`numpy:numpy.random.RandomState`#RandomState
1#numbers.Number#Number
1#arrays with the same dimensions as the input.#NDArray
1#np.ndarray, float, shape = [N,N]#NDArray
1#list of int of size n_outputs#list[int]
1#generator#Generator
1#{ndarray, sparse matrix} of shape                 (n_samples, n_features_out)#NDArray
1#array, shape = [n_samples] or [n_samples, n_targets]#NDArray|tuple[int,int]
1#array-like, shape (n_samples, n_classes)#ArrayLike
1#intercept_decay#float
1#{array-like, sparse matrix} of shape (n_samples, n_outputs)#NDArray|ArrayLike
1#array of shape (n_samples, n_classes), or a list of n_outputs                 such arrays if n_outputs > 1.#NDArray|list[NDArray]
1#{ndarray, sparse matrix} of shape (n_samples, n_components)#NDArray
1#{ndarray, sparse matrix},                shape = (n_samples, n_features * (2*sample_steps - 1))#NDArray
1#ndarray of shape (n_samples,), or, in the multilabel a list of#NDArray
1#1-D arrays#NDArray
1#sparse matrix of shape (dim, dim)#NDArray
1#3D array#NDArray
1#ndarray of shape (n_samples_X, n_samples), or             (n_samples_X, n_targets, n_samples)#NDArray|tuple[int,int,int]
1#ndarray of shape                 (n_samples_X, n_samples_X, n_dims, n_kernels)#NDArray
1#(sparse) array-like of shape (n_samples,) or (n_samples, n_classes)#ArrayLike
1#(sparse) array-like of shape (n_samples, n_classes)#ArrayLike
1#array-like of shape (n_samples, n_classes) or (n_samples,) for             binary classification.#ArrayLike
1#numpy array of shape [n_samples]#NDArray
1#numpy scalar or array of shape (n_classes,)#Scalar|NDArray
1#C-contiguous array of shape (n_samples,) or array of shape             (n_samples, n_classes)#NDArray
1#C-contiguous array of shape (n_samples,), array of shape#NDArray
1#ndarray or a sparse matrix class#NDArray
1#np.ndarray or a sparse matrix class#NDArray
1#ndarray of shape image_size#NDArray
1#list of arrays of shape (n_samples,)#list[ArrayLike]
1#list of dict_type objects of shape (n_samples,)#list[Mapping]
1#list of length (n_features,)#list
1#module#module
1#ndarray of shape(n_samples,)#NDArray
1#{array-like, sparse matrix} of shape (n_samples, n_clusters)#NDArray|ArrayLike
1#ndarray of shape (n_nodes,) or None#NDArray|None
1#ndarray of shape (n_nodes, ) or None#NDArray|None
1#ndarray of shape (n_samples, n_classes) or             list of ndarray of shape (n_output,)#NDArray|list[NDArray]
1#ndarray of shape (n_samples,), (n_samples, n_classes),             or (n_samples, n_classes * (n_classes-1) / 2)#NDArray
1#A TreePredictor object.#TreePredictor
1#ndarray, shape (n_samples, n_classes)#NDArray
1#ndarray, shape (n_samples,) or                 (n_samples, n_trees_per_iteration)#NDArray
1#ndarray of shape of (n_samples, k)#NDArray
1#ndarray of shape = (n_thresholds,)#NDArray
1#float in [0., 1.]#float
1#numpy.ndarray#NDArray
1#{array-like, sparse}, shape=[n_classes_true, n_classes_pred]#NDArray|ArrayLike
1#float (upperlimited by 1.0)#float
1#float or array of float, shape = [n_unique_labels]#float|NDArray
1#None (if average is not None) or array of int, shape =        [n_unique_labels]#None|NDArray
1#float (if average is not None) or array of float of shape                 (n_unique_labels,)#float|NDArray
1#float (if average is not None) or array of float of shape              (n_unique_labels,)#floati|NDArray
1#list of artists#list[Artistxs]
