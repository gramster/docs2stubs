49#array_like#ArrayLike
25#(N, N) ndarray#NDArray
20#numeric (float, or int or +/-np.inf)#float|int
20#double#float
17#1D ndarray#NDArray
16#1-D array#NDArray
14#ndarray of real#NDArray[float]
13#array_like (n, d)#ArrayLike
12#(M, M) ndarray#NDArray
11#integer#int
11#complex ndarray#NDArray[complex]
11#ndarray, shape (n,)#NDArray
11#:class:`numpy.ndarray`#NDArray
9#(N,) ndarray#NDArray
9#sparse matrix#NDArray
9#(n, n) ndarray#NDArray
8#`self` with the dimensions reversed.#
7#2-D array#NDArray
6#MaskedArray#MaskedArray
6#(M,) ndarray#NDArray
6#(m+1, n+1) array#NDArray
5#(M, N) ndarray#NDArray
5#`RootResults` (present if ``full_output = True``)#RootResults
4#tuple of ndarrays#tuple[NDArray, ...]
4#{`numpy.random.Generator`, `numpy.random.RandomState`}#np.random.RandomState|np.random.Generator
4#1-D ndarray#NDArray
4#ndarray, 2-D#NDArray
4#np.matrix#NDArray
4#ndarray, shape=(M, k)#NDArray
4#ndarray, shape=(k,)#NDArray
4#ndarray, shape=(k, N)#NDArray
4#{matrix, ndarray}#NDArray
4#array_like (..., n)#ArrayLike
4#ndarray, shape (n, m)#NDArray
4#(M,) or (M, K) ndarray#NDArray
4#(N, N) array_like#ArrayLike
4#float or complex ndarray#float|NDArray[complex]
4#int32 ndarray#NDArray[int]
3#"frozen" distribution object#
3#rv_frozen instance#
3#The return value has shape the result of numpy broadcasting n and x.#
3#instance of `TransferFunction`#TransferFunction
3#instance of `ZerosPolesGain`#ZerosPolesGain
3#instance of `StateSpace`#StateSpace
3#ndarray, shape (n, 3, 3)#NDArray
3#ndarray, shape (n, 3)#NDArray
3#matplotlib.figure.Figure instance#Figure
3#list of lists#list[lists]
3#The element-wise complex conjugate.#
3#BSpline object#BSpline
3#function#Callable
3#ndarray, shape (n, m - 1)#NDArray
3#ndarray, shape (m,)#NDArray
3#ndarray of int, shape (n,)#NDArray[int]
3#A `scipy.optimize._linprog_util._LPProblem` consisting of the following fields:#LPProblem
3#array_like, shape (n,)#ArrayLike
3#ndarray with shape of x#NDArray
3#(M, K) ndarray#NDArray
2#list of ndarrays#list[NDArray]
2#object with attributes#Any
2#``ConfidenceInterval`` object#ConfidenceInterval
2#list(int)#list[int]
2#``TheilslopesResult`` instance#TheilslopesResult
2#``SiegelslopesResult`` instance#SiegelslopesResult
2#A MaskedArray.#MaskedArray
2#Probability density function evaluated at `x`.#
2#Log of the probability density function evaluated at `x`.#
2#array_like or scalar#ArrayLike|Scalar
2#1d array_like#ArrayLike
2#instance of `dlti` and `StateSpace`#dlti|StateSpace
2#dtype#DType
2#(M,) or (M, N) ndarray#NDArray
2#numpy.matrix or int#np.matrix|int
2#ndarray of reals#NDArray[float]
2#ndarray or list of ndarrays#NDArray|list[NDArray]
2#{ndarray, list of ndarrays}#NDArray|list[NDArray]
2#tuple of (t2, c2, k2)#tuple
2#a BSpline object of the degree ``k`` and with knots ``t``.#BSpline
2#scalar or array_like#Scalar|ArrayLike
2#(N,) float ndarray#NDArray[float]
2#type#
2#HBInfo instance#HBInfo
2#Bunch object with the following fields defined#Bunch
2#list of ndarray or None#list[NDArray]|None
2#ndarray, shape (n + k, n)#NDArray
2#ndarray, shape (m - 1,)#NDArray
2#2-D sparse matrix#NDArray
2#1D array#NDArray
2#ndarray of int with shape of x#NDArray
2#ndarray of bool with shape of x#NDArray
2#ndarray, shape (n, n)#NDArray
2#int, if full_output is true#int
2#number#int|float
2#(N, M) ndarray#NDArray
2#(len(c), len(r)) ndarray#NDArray
2#(N-1, N-1) ndarray#NDArray
2#(M,) or (2, M) double or complex ndarray#NDArray
2#(M, M) double or complex ndarray#NDArray
2#(..., M, M) ndarray#NDArray
2#scalar or ndarray of scalars#Scalar|NDArray[Scalar]
2#list of tuples of ints#list[tuple[int,...]]
2#Output instance#Output
1#{float, array_like}#ArrayLike|float
1#1d float array#NDArray[float]
1#scalar ndarray#NDArray[Scalar]
1#An object with the following attributes.#Any
1#matplotlib.axes.Axes#Axes
1#`~scipy.stats._result_classes.FitResult`#FitResult
1#MannwhitneyuResult#MannwhitneyuResult
1#ndarray of float64#NDArray[float]
1#ndarray, same shape as `observed`#NDArray
1#(2,) ndarray#NDArray
1#median_cihs#median_cihs
1#{list of floats, masked array}#tuple[list[float], NDArray]
1#The function returns two tuples, scalar_shape and bc.#tuple[tuple,tuple]
1#SomersDResult#SomersDResult
1#BarnardExactResult#BarnardExactResult
1#BoschlooExactResult#BoschlooExactResult
1#`~scipy.stats._result_classes.TukeyHSDResult` instance#TukeyHSDResult
1#(self.d, `size`) ndarray#NDArray
1#tuple of numpy.ndarrays.#tuple[NDArray, ...]
1#numpy.ndarray or scipy.sparse.coo_matrix#NDArray|coo_matrix
1#list (n,)#list
1#array_like (n, pvals)#ArrayLike
1#array_like (d,)#ArrayLike
1#tuple of (K-S statistic, probability)#tuple
1#(int, int)#tuple[int,int]
1#PageTrendTestResult#PageTrendTestResult
1#BootstrapResult#BootstrapResult
1#`~scipy.stats._result_classes.BinomTestResult` instance#BinomTestResult
1#``LinregressResult`` instance#LinregressResult
1#ConfidenceInterval instance#ConfidenceInterval
1#instance of `~scipy.stats._result_classes.RelativeRiskResult`#RelativeRiskResult
1#ndarray, see `dtype` parameter above.#NDArray
1#tuple of ndarrays or floats#tuple[NDArray, ...]|float
1#namedtuple#namedtuple
1#`~scipy.stats._result_classes.PearsonRResult`#PearsonRResult
1#float or ndarray (2-D square)#float|NDArray
1#(float, float)#tuple[float,float]
1#Maximum distance of the CDF values below Uniform(0, 1)#
1#Maximum distance of the CDF values above Uniform(0, 1)#
1#array of dtype float#NDArray[float]
1#1-D ndarray of ints#NDArray[int]
1#(nx, ny) ndarray#NDArray
1#(nx + 1) ndarray#NDArray
1#(ny + 1) ndarray#NDArray
1#(N,) array of ints or (2,N) ndarray of ints#NDArray[int]
1#ndarray, shape(nx1, nx2, nx3,...)#NDArray
1#(N,) array of ints or (D,N) ndarray of ints#NDArray[int]
1#1d float ndarray#NDArray[float]
1#ndarray, shape (Kmax, M) or (M,)#NDArray
1#ndarray, shape (Kmax,) or float#NDArray|float
1#(numtaps,) ndarray#NDArray
1#2-D ndarray#NDArray
1#tuple containing the discrete system#tuple
1#np.intp#np.intp
1#number or ndarray or None#float|int|NDArray|None
1#resampled_x or (resampled_x, resampled_t)#
1#float or 1D array#float|NDArray
1#ndarray, same shape as `x`#NDArray
1#instance of `dlti`#dlti
1#instance of `dlti` and `ZerosPolesGain`#dlti|ZerosPolesGain
1#Bunch object#Bunch
1#ndarray, shape (11, 3 * (n + 1))#NDArray
1#Interpolated Rotation, angular rate or acceleration.#
1#(t.size, D)#tuple
1#double or ndarray#double|NDArray
1#integer or array of integers#int|NDArray[int]
1#list or array of lists#list|NDArray[list]
1#scalar or 1-D array#Scalar|NDArray
1#double array of shape (npoints,)#NDArray
1#tuple of arrays#tuple[NDArray, ...]
1#kronecker product in a sparse matrix format#
1#kronecker sum in a sparse matrix format#
1#i, j, x#
1#ndarray, or sparse matrix, or `LinearOperator`#NDArray|LinearOperator
1#ndarray or sparse matrix#NDArray
1#(A, M, x, b, postprocess)#tuple
1#(M, M) sparse matrix#NDArray
1#2d ndarray#NDArray
1#(M,M) ndarray#NDArray
1#LinearOperator.dtype#DType
1#array of self.dtype#NDArray[DType]
1#This matrix in the passed format.#NDArray
1#numpy.matrix, 2-D#numpy.matrix
1#``List[int]``#list[int]
1#BSpline instance or a tuple#BSpline|tuple
1#`BSpline` instance or tuple#BSpline|tuple
1#BSpline instance or a tuple of (t2, c2, k2)#BSpline|tuple
1#ndarray, shape(k+1,)#NDArray
1#spline#spline
1#`numpy.poly1d` instance#poly1d
1#2-D array with shape (len(y), len(x))#NDArray
1#bool array#NDArray[bool]
1#Polynomial class#Polynomial
1#`csr_array` object#csr_array
1#1-D array, shape(n,)#NDArray
1#1-D array, shape (n+k-1,)#NDArray
1#a BSpline object of the degree `k` with knots `t`.#BSpline
1#2-tuple#tuple
1#poly1d instance#poly1d
1#(nmonos, ndim) int ndarray#NDArray[int]
1#(P + R, S) float ndarray#NDArray
1#Interpolated array#NDArray
1#(Q, ...) ndarray#NDArray
1#ndarray, shape xi.shape[:-1] + values.shape[ndim:]#NDArray
1#real ndarray#NDArray
1#complex-valued N-D NumPy array#NDArray
1#ndarray (complex)#NDArray[complex]
1#FullArgSpec(args, varargs, varkw#
1#hashable object#
1#MatFileReader object#MatFileReader
1#mapping#Mapping
1#{0, 1, 2}#Literal[0,1,2]
1#``scipy.sparse.coo_matrix``#coo_matrix
1#char#str
1#scipy.sparse.csc_matrix instance#csc_matrix
1#record array#
1#`MetaData`#MetaData
1#numpy array#NDArray
1#Python string#str
1#`DenseOutput`#DenseOutput
1#ndarray, shape (n,) or (n, n_points)#NDArray
1#ndarray, shape (3, n)#NDArray
1#ndarray, shape (n_states,) or (n_states, n_points)#NDArray
1#ndarray or csc_matrix, shape (n, n)#ndarray|csc_matrix
1#ndarray, shape (n_points,)#NDArray
1#ndarray, shape (n, n_points)#NDArray
1#`OdeSolution` or None#OdeSolution|None
1#ndarray, shape (n, n, m)#NDArray
1#ndarray with shape (n, k, m) or None#NDArray|None
1#ndarray with shape (n + k, k) or None#NDArray|None
1#csc_matrix, shape (n * m + k, n * m + k)#csc_matrix
1#ndarray, shape (k,)#NDArray
1#ndarray or None, shape (k,)#NDArray|None
1#array, shape (len(t), len(y0))#NDArray
1#dict, only returned if full_output == True#dict|None
1#explain#
1#ndarray of bool, shape (n,)#NDArray[bool]
1#{ndarray, sparse matrix, LinearOperator}#NDArray|LinearOperator
1#np.ndarray or sparse.coo_matrix#ndarray|coo_matrix
1#1-D np.array#NDArray
1#list of functions#list[CAllable]
1#dict (returned only if `full_output` is True)#dict|None
1#str (returned only if `full_output` is True)#str|None
1#int (returnned only if `full_output` is True)#int|None
1#LinearOperator, shape (n, n)#LinearOperator
1#LinearOperator, shape (m, n)#LinearOperator
1#LinearOperator, shape (n, m)#LinearOperator
1#`OptimizeResult` with the fields documented below. Note the following#OptimizeResult
1#list of {ndarray, sparse matrix}#list[NDArray]
1#{0, 1, 2, 3}#Literal[0,1,2,3]
1#OptimizeResult with the following fields defined#OptimizeResult
1#ndarray, shape (2,)#NDArray
1#ndarray with shape (k,) or float#NDArray|float
1#stp, f_count, g_count, fval, old_fval#tuple
1#f_val_at_alpha#
1#phi1#
1#`x`.#
1#ndarray of float, if full_output is true#None|NDArray[float]
1#string, if full_output is true#str|None
1#`RootResults`#RootResults
1#ndarray, shape=(n, n)#NDArray
1#tuple ``(lmin, lmax)``#tuple
1#text#
1#Search directions as defined in [4]#
1#(M*P, N*Q) ndarray#NDArray
1#(k, n) ndarray#NDArray
1#(N, NRHS) ndarray#NDArray
1#(N,) or (N, K) ndarray#NDArray
1#(K,) ndarray or float#NDArray|float
1#(min(M, N),) ndarray or None#None|NDArray
1#(n,) ndarray#NDArray
1#numpy datatype#DType
1#For ``compute_expm = False``, only `expm_frechet_AE` is returned.#
1#2-D ndarray with shape (N*N, N*N)#NDArray
1#(m, n) ndarray#NDArray
1#**(If permute_l == True)**#
1#(K, N) ndarray#NDArray
1#real or complex array#NDArray[float|complex]
1#(n*m, k) ndarray#NDArray
1#(M, M) float or complex ndarray#NDArray[float|complex]
1#For ``compute_uv=False``, only ``s`` is returned.#
1#(min(M, N),) ndarray#NDArray
1#(N, K) ndarray#NDArray
1#ndarray, shape (min(N, K),)#NDArray
1#int ndarray#NDArray[int]
1#(K, N), ndarray#tuple[K,N]|NDArray
1#(u + 1, M) ndarray#NDArray
1#(n_rows, n_columns) csc_matrix#csc_matrix
1#(N, N) array_like upper triangular#NDArray
1#non-negative integer#int
1#positive integer#int
1#float64 ndarray#NDArray[float]
1#A tuple (left, w, h, md), where#tuple
1#avg_dist#
1#Model instance#Model
1#list(str)#list[str]
