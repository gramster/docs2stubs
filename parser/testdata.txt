ColumnTransformer
LocalOutlierFactor
NearestNeighbors
KNeighborsRegressor
ndarray of shape (n_queries,) or (n_queries, n_outputs), dtype=int
RadiusNeighborsRegressor
ndarray of shape (n_queries,) or (n_queries, n_outputs),                 dtype=double
KNeighborsTransformer
RadiusNeighborsTransformer
array of the same shape as ``dist``
{sparse matrix, array-like}, (n_samples, n_samples)
array-like or tuple of array-like
ndarray of str objects
{ndarray, sparse matrix} of shape (n_samples, n_features)
float or ndarray of floats
sparse matrix of shape (n_samples, n_samples)
{ndarray, sparse matrix} of shape (n_samples, n_classes)
sparse matrix of shape (n_samples, n_features)
ndarray of shape (n_samples,) of arrays
{array, sparse matrix}
{ndarray, sparse matrix}
sparse matrix of shape (n_samples_transform, n_samples_fit)
sparse-matrix of shape (n_queries, n_samples_fit)
ndarray of shape (n_samples, n_components) or None
mapping of string to any
array-like or sparse matrix of                 shape (n_samples, sum_n_components)
BernoulliRBM
array of integers, shape: n_samples
list of shape (n_alphas,) of ndarray of shape             (n_features, n_features)
mask
ndarray of shape coef.shape
ndarray, dtype=np.intp
ndarray of str or `None`
_CalibratedClassifier instance
ndarray of shape (n_features,) or (n_samples,), dtype=floating
ndarray of shape (n_features,), dtype={np.float32, np.float64}
the return value of `func`
(doc_topic_distr, suff_stats)
array-like, sparse matrix or list
{ndarray, sparse matrix} of shape                 (n_samples, n_encoded_features)
ndarray of shape (n_components, n_features),
ndarray array of shape (n_samples, n_features_new)
list of size n_outputs of ndarray of size (n_classes,)
{ndarray, sparse matrix} of shape (n_samples, n_features)         or (n_samples, n_features_with_missing)
ndarray of shape (n_features, n_alphas) or             (n_targets, n_features, n_alphas)
{array-like, sparse matrix}
.. warning:: Risk of data leak
{ndarray, sparse matrix} of shape (n_components, n_features)
json
tuple if `return_X_y=True`
ndarray of shape `shape`
ndarry of shape (n_samples,)
{array-like, sparse matrix} of                 shape (n_samples, sum_n_components)
arrays of shape (n_samples,) or (n_samples, n_classes)
sparse matrix of (n_samples, n_features)
TreeNode
ndarray of shape (n_bins,) or smaller
sparse matrix of shape (n_samples, n_nodes)
ndarray of shape (n_samples, n_classes), or a list of such arrays
ndarray of shape (n_samples, n_classes) or list of such arrays
sparse matrix of shape (n_samples, n_out)
{array-like, sparse matrix} of shape (n_samples_X, n_features)
ndarray of shape  (n_classes * (n_classes - 1) / 2)
{array-like, sparse matrix} of shape (n_samples_Y, n_features)
array or indicator matrix
ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1
KNeighborsClassifier
ndarray of shape (n_queries, n_classes), or a list of n_outputs                 of such arrays if n_outputs > 1.
RadiusNeighborsClassifier
ndarray of shape (n_queries, n_classes), or a list of                 n_outputs of such arrays if n_outputs > 1.
X, Y, x_mean, y_mean, x_std, y_std
array-like, shape (X.shape[0], len(clf.classes_))
ndarray of shape (n_samples, n_components),
ndarray of shape (n_components, n_features) or None
array of shape=(n_features, n_features)
array, shape=(n_features, n_features)
X_original array-like of shape (n_samples, n_features)
estimator instance
{ndarray, sparse matrix} or tuple of these
ndarray of shape (n_samples,), dtype=np.int64
a cross-validator instance.
list, length=2 * len(arrays)
dict of float arrays of shape (n_splits,)
ndarray of float of shape=(len(list(cv)),)
dict with the following attributes
iterator over dict of str to any
ndarray of shape (n_samples,) or (n_samples, n_classes)                 or (n_samples, n_classes * (n_classes-1) / 2)
{ndarray, sparse matrix} of shape (n_samples,)
array or CSR matrix, shape (n_samples, n_classes)
sparse matrix of shape (n_samples, n_classes)
{ndarray, sparse matrix} of shape (n_samples, NP)
ndarray of shape (n_knots, n_features), dtype=np.float64
{ndarray, sparse matrix}, dtype={np.float32, np.float64}
ndarray, dtype={np.float32, np.float64}
ndarray of shape (n_infrequent_categories,) or None
ndarray of shape (n_samples, ) if axis=1 else (n_features, )
{ndarray, sparse matrix} of shape (n_samples, n_features + 1)
{ndarray, sparse matrix} of (n_samples, n_features)
array, (n_components, n_features)
ndarray of shape (n_samples, n_components) or             (n_samples, min(rank, n_components))
Pipeline
FeatureUnion
affinity_matrix of shape (n_samples, n_samples)
ndarray of shape (n_samples * (n_samples-1) / 2,)
sparse matrix in CSR format, shape = [n_samples, n_samples]
array-like, shape [n_samples, n_components]
array-like of shape (n_samples, n_class * (n_class-1) / 2)
ndarray of shape (n_samples, n_classes * (n_classes-1) / 2)
:class:`~sklearn.utils.Bunch` or dict of such instances
list of 1d ndarrays
array of shape [n_samples]
array, shape = [n_samples, n_classes] or [n_samples]
array of shape [n_samples, n_selected_features]
array of shape [n_samples, n_original_features]
list of (objective, dual_gap) pairs
list of shape (n_alphas,), dtype=float
{'int', 'str', 'bool', None}
subset
sequence of array-like of shape (n_samples,) or             (n_samples, n_outputs)
sequence of indexable data-structures
element wise square
1d boolean nd-array
context_manager
ndarray of int
pandas
object with the joblib.Memory interface
list of {ndarray, sparse matrix, dataframe} or None
sparse matrix.
:class:`numpy:numpy.random.RandomState`
numbers.Number
ndarray or None
dict or tag value
ndarray of shape (n_features,) or (n_samples,), dtype=integral
MissingValues
boolean array
1D array of shape (n_components,) containing the `n_components`
2D array of shape (M.shape[0], n_components) containing the
ndarray of shape (M, len(arrays))
arrays with the same dimensions as the input.
result
ndarray with same shape as u
converted_container
int if `array` 1D, ndarray if `array` 2D
X, y
ndarray of shape (n_samples,) if n_classes == 2                else (n_samples, n_classes)
sparse csc matrix of size (n_samples, n_outputs)
np.ndarray, float, shape = [N,N]
list of int of size n_outputs
`pytest.mark.parametrize`
generator
iter(Matrices)
ndarray of float
estimator with sklearn API
{ndarray, sparse matrix} of shape                 (n_samples, n_features_out)
{ndarray, sparse matrix} of shape         (n_samples, n_features)
{ndarray, sparse matrix} of shape (n_samples,         n_features)
array, shape = [n_samples] or [n_samples, n_targets]
ndarray, shape (len(w))
np.ndarray, shape (n_samples,)
{array-like, sparse matrix} of shape (n_samples, n_features)
ndarray of shape (n_samples,) or             (n_samples, n_classes)
ndarray of shape = (n_features,)
intercept_decay
{ndarray, sparse matrix} of shape (n_samples,) or (n_samples, n_targets)
{array-like, sparse matrix} of shape (n_samples, n_outputs)
array of shape (n_samples, n_classes), or a list of n_outputs                 such arrays if n_outputs > 1.
int or ndarray of int
sparse matrix of shape (n_components, n_features)
{ndarray, sparse matrix} of shape (n_samples, n_components)
{ndarray, sparse matrix},                shape = (n_samples, n_features * (2*sample_steps - 1))
stream
scipy.sparse matrix of shape (n_samples, n_features)
ndarray of shape (n_samples,), or, in the multilabel a list of
load_svmlight_file(files[i])
np.array or scipy.sparse.csr_matrix
np.array
np.ndarray
1-D arrays
ndarray of shape (n_features, n_components) or             (n_components, n_features)
sparse matrix of shape (dim, dim)
3D array
ndarray of shape (n_samples, n_samples) or                 (n_samples, n_samples, n_targets)
ndarray of shape (n_samples_X, n_samples), or             (n_samples_X, n_targets, n_samples)
(sparse) array-like of shape (n_samples,) or (n_samples, n_classes)
(sparse) array-like of shape (n_samples, n_classes)
array-like of shape (n_samples, n_classes) or (n_samples,) for             binary classification.
numpy array of shape [n_samples]
numpy scalar or array of shape (n_classes,)
C-contiguous array of shape (n_samples,) or array of shape             (n_samples, n_classes)
C-contiguous array of shape (n_samples,), array of shape
ndarray or a sparse matrix class
np.ndarray or a sparse matrix class
strided ndarray
array of shape (n_patches, patch_height, patch_width) or         (n_patches, patch_height, patch_width, n_channels)
ndarray of shape image_size
array of shape (n_patches, patch_height, patch_width) or              (n_patches, patch_height, patch_width, n_channels)
True if stop words are consistent with the preprocessor
list of arrays of shape (n_samples,)
list of dict_type objects of shape (n_samples,)
list of length (n_features,)
module
{array-like, sparse matrix} of shape (n_samples, n_clusters)
sparse matrix
ndarray of shape (n_nodes,) or None
ndarray of shape (n_nodes, ) or None
array [n_samples]
ndarray of shape (n_samples,), (n_samples, n_classes),             or (n_samples, n_classes * (n_classes-1) / 2)
ndarray of shape (n_samples, n_estimators) or                 (n_samples, n_classes * n_estimators)
A TreePredictor object.
ndarray, shape (n_samples,) or                 (n_samples, n_trees_per_iteration)
ndarray of shape of (n_samples, k)
generator of ndarray of shape (n_samples, k)
probabilities_or_labels
ndarray of shape (n_samples, n_classes, n_outputs) or                 (n_samples, 1, n_outputs)
ndarray of shape = (n_thresholds,)
float in [0., 1.]
numpy.ndarray
ndarray of shape (n_samples_X * n_samples_Y, n_features) or             (n_samples_X, n_samples_Y)
ndarray of shape (n_samples_X, n_samples_X) or             (n_samples_X, n_samples_Y)
one of {'continuous', continuous-multioutput'}
array-like of shape (n_outputs) or string in ['raw_values',
{array-like, sparse}, shape=[n_classes_true, n_classes_pred]
ndarray of shape (2, 2), dtype=np.int64
float (upperlimited by 1.0)
float or array of shape [n_classes]
one of {'multilabel-indicator', 'multiclass', 'binary'}
float or ndarray of shape (n_unique_labels,), dtype=np.float64
float or array of float, shape = [n_unique_labels]
None (if average is not None) or array of int, shape =        [n_unique_labels]
float (if average is not None) or array of float of shape                 (n_unique_labels,)
float (if average is not None) or array of float of shape              (n_unique_labels,)
DecisionTreeClassifier
DecisionTreeRegressor
list, length n
list of artists

tuple if ``return_X_y`` is True
boolean array of shape [
float (if average is not None) or array of float, shape =        [n_unique_labels]
returns an instance of self.
list, length = n_layers - 1
list, length = len(grads)
